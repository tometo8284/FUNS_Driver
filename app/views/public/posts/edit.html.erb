<div class="container">
<h1><%= @post.title %>の編集</h1>
<%= form_with model: @post, url: post_path(@post.id), method: :patch do |f| %>
<label>タイトル</label>
  <%= f.text_field :title, autofocus: true %>
<br />
<label>TOP画像</label>
  <%= f.file_field :image %>
<br />
<label>説明</label>
  <%= f.text_area :describe, autofocus: true %>
<br />
<label>カテゴリ選択</label>
  <%= f.collection_select :category_id, Category.all, :id, :name, autofocus: true %>
<br />
<label>地方選択</label>
  <%= f.select :area, Post.areas.keys.map{|k| [t("enums.post.area.#{k}"), k] }, autofocus: true %>
<br />
<label>都道府県選択</label>
  <%= f.select :prefecture, Post.prefectures.keys.map{|k| [t("enums.post.prefecture.#{k}"), k] }, autofocus: true %>
<br />
<label>地名</label>
  <%= f.text_field :location, autofocus: true %>
<br />
<%= f.fields_for :maps do |kf| %>
    <label>緯度</label>
      <%= kf.text_field :lat, autofocus: true %>
    <label>経度</label>
      <%= kf.text_field :lng, autofocus: true %> 
    <%= kf.file_field :marker_image, multiple: true %>
    <label>マーカーの説明</label>
      <%= kf.text_area :marker_describe, autofocus: true %>
    <label>linelatlng</label>
    <%= kf.text_field :line_lat, autofocus: true %>
    <%= kf.text_field :line_lng, autofocus: true %>
    <br />
    <% end %>
  
<label>乗り物区分</label>
  <%= f.select :vehicle, Post.vehicles.keys.map{|k| [t("enums.post.vehicle.#{k}"), k] }, autofocus: true %> 
<br />
  <%= f.radio_button :is_deleted, :false %>
  <%= f.label :is_deleted, "公開" %> &nbsp;
  <%= f.radio_button :is_deleted, :true %>
  <%= f.label :is_deleted, "非公開" %>
<br />

<h2>Map</h2>
    <input id="address" type="textbox" placeholder="住所を入力">
    <input type="button" value="検索" onclick="codeAddress()">
    <p>赤色マーカーをドラック＆ドロップで位置の調整ができます。<br />
    右クリックで黄色マーカー<p>
    <input id="remove-line" type="button" value="Remove Line" />
    <div id='map'></div>
 <style>
    #map {
      height: 600px;
      width: 1000px;
    }
  </style>

 <script>
    let map
    let geocoder
    let marker = [];
    let lineMarker = [];
    let infoWindow = [];
    let aft
    let polyline
    let linePath = [];
    let markerData = <%== @post.maps.map {|o| { lat: o['lat'], lng: o['lng'] } }.to_json %>
    let imageData = <%== @post.maps.map {|o| { get_marker_image: rails_representation_path(o.get_marker_image) }}.to_json %>
    let describeData = <%== @post.maps.map {|o| { marker_describe: o['marker_describe'] }}.to_json %>
    let lineData = <%== @post.maps.map {|o| { line_lat: o['line_lat'], line_lng: o['line_lng'] } }.to_json %>
    let delCount = 0
    // markerData.filter(v=> v.lat != 0)
    function initMap() {
      //初期表示位置
      geocoder = new google.maps.Geocoder()
      map = new google.maps.Map(document.getElementById('map'), {
        center: markerData[0],
        zoom: 13
      });
      
      //以下メインマーカー
      let id = markerData[0]['id']
      markerLatLng = new google.maps.LatLng({
        lat: markerData[0]['lat'],
        lng: markerData[0]['lng']
      });
      
      marker[0] = new google.maps.Marker({
        position: markerLatLng,
        map: map,
        draggable: true
      });
      
      infoWindow[0] = new google.maps.InfoWindow({
        content: '<img src="' + imageData[0]['get_marker_image'] + '"><div class="sample">' + describeData[0]['marker_describe'] + '</div>'
      }); 
      marker[0].addListener('click', function () {
        infoWindow[0].open(map, marker[0]);
        });   
      //ここまで
      
      // 以下メインマーカー以外の挙動
      for(let i = 1; i < markerData.length; i++) {
        let id = markerData[i]['id']
      markerLatLng = new google.maps.LatLng({
        lat: markerData[i]['lat'],
        lng: markerData[i]['lng']
      });
      
      marker[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map,
        icon: 'https://maps.google.com/mapfiles/kml/paddle/'+ i.toString() +'.png' ,
        draggable: true
      });
      
      infoWindow[i] = new google.maps.InfoWindow({
        content: '<img src="' + imageData[i]['get_marker_image'] + '"><div class="sample">' + describeData[i]['marker_describe'] + '</div>'
      }); 
       
      markerEvent(i);
      function markerEvent(i) {
        marker[i].addListener('click', function () {
        infoWindow[i].open(map, marker[i]);
        }); 
      } 
      
      marker[i].addListener('rightclick', function(){  
        marker[i].setMap(null); 
          document.getElementById(`post_maps_attributes_${i}_lat`).value = 0
          document.getElementById(`post_maps_attributes_${i}_lng`).value = 0 
        });
      }
      
      // 全てのマーカーのドラッグ終了時の緯度経度計測
      for(let i = 0; i < 5; i++) {
        google.maps.event.addListener( marker[i], 'dragend', function(ev){
          document.getElementById(`post_maps_attributes_${i}_lat`).value = ev.latLng.lat();
          document.getElementById(`post_maps_attributes_${i}_lng`).value = ev.latLng.lng(); 
        });
      }
        
      // 以下追加したマーカーの挙動
        map.addListener('rightclick', function(e){ 
          for(var i = 1; i < 5; i++){ 
            if (document.getElementById(`post_maps_attributes_${i}_lat`).value == 0 )  { 
            var marker = new google.maps.Marker({
            position: e.latLng,
            map: map,
            icon: 'https://maps.google.com/mapfiles/kml/paddle/'+ i.toString() +'.png',
            animation: google.maps.Animation.DROP
            });
                document.getElementById(`post_maps_attributes_${i}_lat`).value = e.latLng.lat();
                document.getElementById(`post_maps_attributes_${i}_lng`).value = e.latLng.lng();
            i = 5;}
            
            else if(document.getElementById(`post_maps_attributes_${i}_lat`).value === e.latLng.lat()) { 
            marker.setMap(null); }
            }
          
            marker.addListener('rightclick', function (){ 
            for(let i = 1; i < 5; i++) {
              if (document.getElementById(`post_maps_attributes_${i}_lat`).value == e.latLng.lat()) {
                 delCount += 1
                 marker.setMap(null); 
                 document.getElementById(`post_maps_attributes_${i}_lat`).value = 0
                 document.getElementById(`post_maps_attributes_${i}_lng`).value = 0 
              } 
            }
            });
        });
     
      //既存のline表示処理+削除
      for (let i = 0; i < lineData.length; i++) {
        if (lineData[i]['line_lat'] != (0.0 || null)  && lineData[i]['line_lng'] != (0.0 || null)) {
          lineMarkerLatLng = new google.maps.LatLng({
            lat: lineData[i]['line_lat'],
            lng: lineData[i]['line_lng']
          });
        
          lineMarker[i] = new google.maps.Marker({
            position: lineMarkerLatLng,
            map: map,
            icon: {
              url: 'data:image/svg+xml;utf-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="50" fill="black"/></svg>'),
              scaledSize: new google.maps.Size(8, 8)
            }
          });
        
          var lineCoordinates = [];
          
          for (let j = 0; j < lineData.length; j++){
            if (lineData[j]['line_lat'] != (0.0 || null)  && lineData[j]['line_lng'] != (0.0 || null)) {
              lineCoordinates.push(new google.maps.LatLng(lineData[j]['line_lat'], lineData[j]['line_lng']))
            }
          }
          
        }
     }
          //既存のラインの削除処理
            lineMarker.forEach((marker, index) => {
              lineMarker[index].addListener('click', function(e){
                lineCoordinates.splice(index, 1);
                lineMarker[index].setMap(null);
                linePath.setMap(null);
                document.getElementById(`post_maps_attributes_${index}_line_lat`).value = ''
                document.getElementById(`post_maps_attributes_${index}_line_lng`).value = ''
                
                linePath = new google.maps.Polyline({
                  map: map,
                  path: lineCoordinates,
                  position: lineMarkerLatLng,
                  strokeColor: "#FF0000",
                  strokeOpacity: 1.0,
                  strokeWeight: 2
                });
              })
              
            })
          
            linePath = new google.maps.Polyline({
              map: map,
              path: lineCoordinates,
              position: lineMarkerLatLng,
              strokeColor: "#FF0000",
              strokeOpacity: 1.0,
              strokeWeight: 2
            });
        
         
          
          
      
      //ラインを追加+追加したラインの削除処理
      map.addListener('click', function(e){
        var lineMarker = new google.maps.Marker({
          position: e.latLng,
          map: map,
          animation: google.maps.Animation.DROP,
          icon: {
            url: 'data:image/svg+xml;utf-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="50" fill="black"/></svg>'),
            scaledSize: new google.maps.Size(10, 10)
          }
        });
           
        if (document.getElementById(`post_maps_attributes_4_line_lat`).value != '') {
          lineMarker.setMap(null);
          return;
        }    
            
        for (let i = 0; i < 5; i++){
          if (document.getElementById(`post_maps_attributes_${i}_line_lat`).value == '' )  {
            document.getElementById(`post_maps_attributes_${i}_line_lat`).value = e.latLng.lat();
            document.getElementById(`post_maps_attributes_${i}_line_lng`).value = e.latLng.lng(); 
            
            var lineCoordinates = [];
            for (let j = 0; j < 5; j++){
              if (document.getElementById(`post_maps_attributes_${j}_line_lat`).value != '' && document.getElementById(`post_maps_attributes_${j}_line_lng`).value != ''){
                lineCoordinates.push(new google.maps.LatLng(document.getElementById(`post_maps_attributes_${j}_line_lat`).value, document.getElementById(`post_maps_attributes_${j}_line_lng`).value));
              }
              //再度クリックでライン削除処理
              lineMarker.addListener('click', function(){
                if (document.getElementById(`post_maps_attributes_${i}_line_lat`).value == e.latLng.lat()) {
                delCount += 1
                lineMarker.setMap(null); 
                linePath.setMap(null);
                document.getElementById(`post_maps_attributes_${i}_line_lat`).value = ''
                document.getElementById(`post_maps_attributes_${i}_line_lng`).value = ''
                }
              });
            }
            break; 
          }
        }
        let linePath = new google.maps.Polyline({
            map: map,
            path: lineCoordinates,
            strokeColor: "#FF0000",
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
      });     
    }
    
    
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async defer></script>

<%= f.submit "変更を保存" %>
<% end %>

<%= link_to "戻る", post_path(@post) %>
</div>