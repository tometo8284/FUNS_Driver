<h1>ドライブデータ投稿</h1>
  <%= form_with model: @post, url: posts_path, method: :post do |f| %>
    <label>タイトル</label>
      <%= f.text_field :title %>
    <br />
    <label>TOP画像</label>
      <%= f.file_field :image, accept: "image/*" %>
    <br />
    <label>説明</label>
      <%= f.text_area :describe,:value =>"", id: :describe %>
    <br />
    <label>カテゴリ選択</label>
      <%= f.collection_select :category_id, Category.all, :id, :name %>
    <br />
    <label>地方選択</label>
      <%= f.select :area, Post.areas.keys.map{|k| [t("enums.post.area.#{k}"), k] } %>
    <br />
    <label>都道府県選択</label>
      <%= f.select :prefecture, Post.prefectures.keys.map{|k| [t("enums.post.prefecture.#{k}"), k] } %>
    <br />
    <label>地名</label>
      <%= f.text_field :location %>
    <br />
    <p>※ピンを立てると自動で経度と緯度は入力されます。必要に応じてピンの説明と画像を挿入してください。<br />
    先頭には赤マーカーの情報が入ります。
    <br />その下から、それぞれ黄マーカー1~4の情報を入力して下さい。</p>
    <%= f.fields_for :maps do |kf| %>
    <label>緯度</label>
      <%= kf.text_field :lat, value: 0 %>
    <label>経度</label>
      <%= kf.text_field :lng, value: 0 %> 
    <label>ピンを立てた地点の解説</label>
      <%= kf.text_area :marker_describe %>
    <%= kf.file_field :marker_image, accept: "image/*", multiple: true %>
    <br />
    <% end %>
    <%= f.fields_for :maps do |lf| %>
    <label>line</label>
      <%= lf.text_field :line_lat %>
      <%= lf.text_field :line_lng %>
    <br />
    <% end %>
    <label>乗り物区分</label>
      <%= f.select :vehicle, Post.vehicles.keys.map{|k| [t("enums.post.vehicle.#{k}"), k] } %>
    <br />
    <%= f.radio_button :is_deleted, :false %>
    <%= f.label :is_deleted, "公開" %> &nbsp;
    <%= f.radio_button :is_deleted, :true %>
    <%= f.label :is_deleted, "非公開" %>
    <br />
    
  
  
  <h2>Map</h2>
    <input id="address" type="textbox" placeholder="住所を入力">
    <input type="button" value="検索" onclick="codeAddress()">
    <p>赤色マーカーをドラック＆ドロップで位置の調整ができます。<br />
    右クリックで黄色マーカー<p>
    <div id='map'></div>

  <style>
    #map {
      height: 1000px;
      width: 1000px;
    }
  </style>

  <script>
    //初期マップの設定
    let map
    function initMap(){
      geocoder = new google.maps.Geocoder()

      map = new google.maps.Map(document.getElementById('map'), {
        center:  {lat: 35.6803997, lng:139.7690174},  //東京
        zoom: 15,
      });
    }
  
    let geocoder
    let mainmarker
    let marker 
   // let maininfoWindow
    let infoWindow 
    let aft
    function codeAddress(){
    let inputAddress = document.getElementById('address').value;
      geocoder.geocode( { 'address': inputAddress}, function(results, status) {
      if (status == 'OK') {
        // trueになればマーカーを複製できないようにする
        if (aft == true){
          marker.setMap(null);
        }
        //検索時にマーカーを作成する
        map.setCenter(results[0].geometry.location);
          mainmarker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location,
            draggable: true	// ドラッグ可能にする
          });
          
           // m_containerに画像と説明フォームを入れ込む処理
          //var m_image = document.getElementById(`post_maps_attributes_0_marker_image`);
          //var m_describe = document.getElementById(`post_maps_attributes_0_marker_describe`);
          //var m_container = document.createElement("div");
        //  m_container.appendChild(m_image);
         // m_container.appendChild(m_describe);
          
         // maininfoWindow = new google.maps.InfoWindow({
          //  position: results[0].geometry.location ,
        //    content: m_container
          // });
          //mainmarker.addListener('click', function() { // マーカーをクリックしたとき
          //  maininfoWindow.open(map, mainmarker); // 吹き出しの表示
          //});  
          
         //右クリックでさらにマーカーを作成
         
        map.addListener('rightclick', function(e){
            var marker = new google.maps.Marker({
            position: e.latLng,
            map: map,
            icon: "https://maps.google.com/mapfiles/ms/micons/yellow-dot.png",
            title: e.latLng.toString(),
            animation: google.maps.Animation.DROP
          });
          
         
          // 5回処理を繰り返す
          for(let i = 1; i < 5; i++) {
            if (document.getElementById(`post_maps_attributes_${i}_lat`).value == 0 )  {
                document.getElementById(`post_maps_attributes_${i}_lat`).value = e.latLng.lat();
                document.getElementById(`post_maps_attributes_${i}_lng`).value = e.latLng.lng(); 
                
                // containerに画像と説明投稿フォームを入れ込む処理
                //var image = document.getElementById(`post_maps_attributes_${i}_marker_image`);
                //var describe = document.getElementById(`post_maps_attributes_${i}_marker_describe`);
                //var container = document.createElement("div");
                  //  container.appendChild(describe);
                  //  container.appendChild(image);
                
               infoWindow = new google.maps.InfoWindow({
                 content: i.toString()
                }); 
                marker.addListener('click', function() { // マーカーをクリックしたとき
            　     infoWindow.open(map, marker); // 吹き出しの表示
                });  
                               
            i = 5; }
            else if (document.getElementById(`post_maps_attributes_4_lat`).value != 0) {
            marker.setMap(null); }
          }
          
            //追加したマーカーの削除
          marker.addListener('rightclick', function(){ 
            for(let i = 1; i < 5; i++){
              if (document.getElementById(`post_maps_attributes_${i}_lat`).value == e.latLng.lat()) {
                  marker.setMap(null); 
                  document.getElementById(`post_maps_attributes_${i}_lat`).value = 0
                  document.getElementById(`post_maps_attributes_${i}_lng`).value = 0 
              }
            }
          });
        });
          
        //ここでメインマーカーは複製されない様にする処理を走らせる
          aft = true
        //検索した時に緯度経度を入力する
          document.getElementById('post_maps_attributes_0_lat').value = results[0].geometry.location.lat();
          document.getElementById('post_maps_attributes_0_lng').value = results[0].geometry.location.lng(); 
          
        // メインマーカーのドロップ（ドラッグ終了）時のイベント
          google.maps.event.addListener( mainmarker, 'dragend', function(ev){
            document.getElementById('post_maps_attributes_0_lat').value = ev.latLng.lat();
            document.getElementById('post_maps_attributes_0_lng').value = ev.latLng.lng();
          });
        
        
        // 以下ライン作成処理
          map.addListener('click', function(e){
            for(let i = 5; i < 10; i++){
            if (document.getElementById(`post_maps_attributes_${i}_line_lat`).value == 0 )  {
            var marker = new google.maps.Marker({
              position: e.latLng,
              map: map,
              animation: google.maps.Animation.DROP,
              icon: {
                url: 'data:image/svg+xml;utf-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="50" fill="black"/></svg>'),
                scaledSize: new google.maps.Size(10, 10)
              }
            });
            
              document.getElementById(`post_maps_attributes_${i}_line_lat`).value = e.latLng.lat();
              document.getElementById(`post_maps_attributes_${i}_line_lng`).value = e.latLng.lng(); 
              debugger
              
              
              var lineCoordinates = [
                  new google.maps.LatLng(document.getElementById(`post_maps_attributes_${5}_line_lat`).value, document.getElementById(`post_maps_attributes_${5}_line_lng`).value),
                  new google.maps.LatLng(document.getElementById(`post_maps_attributes_${6}_line_lat`).value, document.getElementById(`post_maps_attributes_${6}_line_lng`).value),
                  new google.maps.LatLng(document.getElementById(`post_maps_attributes_${7}_line_lat`).value, document.getElementById(`post_maps_attributes_${7}_line_lng`).value),
                  new google.maps.LatLng(document.getElementById(`post_maps_attributes_${8}_line_lat`).value, document.getElementById(`post_maps_attributes_${8}_line_lng`).value),
                  new google.maps.LatLng(document.getElementById(`post_maps_attributes_${9}_line_lat`).value, document.getElementById(`post_maps_attributes_${9}_line_lng`).value),
              ];
             
              //lineCoordinates.filter(v=> v.line_lat != 0);
              
              i = 10; }
              
              else if (document.getElementById(`post_maps_attributes_9_line_lat`).value != 0) {
                marker.setMap(null); }
                
                
                
                
                let linePath = new google.maps.Polyline({
                  map: map,
                  path: lineCoordinates,
                  strokeColor: "#FF0000",
                  strokeOpacity: 1.0,
                  strokeWeight: 2
                }); 
                linePath.setMap(map);
                
               } 
               });
            
             
          
        
        
      } else {
          alert('該当する結果がありませんでした：' + status);
        }
    }); 
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async defer></script>
  <%= f.submit "投稿" %>
<% end %>